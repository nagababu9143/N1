{"version":3,"sources":["components/MemeGenerator/styledComponents.js","components/MemeGenerator/index.js","App.js","index.js"],"names":["BgContainerComponent","styled","div","withConfig","displayName","componentId","FormComponent","form","HeadingComponent","h1","LabelComponent","label","InputComponent","input","OptionComponent","select","ButtonComponent","button","OutputContainer","props","bgImage","Paragraph","p","size","fontSizesOptionsList","optionId","displayText","MemeGenerator","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","bottomText","topText","imageUrl","fontSize","isGenerated","onImageUrlChange","event","setState","target","value","onTopTextChange","onBottomTextChange","onFontSizeChange","onSubmitForm","preventDefault","_createClass","key","_this$state","this","_jsxs","children","onSubmit","_jsx","htmlFor","id","placeholder","onChange","map","each","type","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"6NAGaA,EAAuBC,IAAOC,IAAGC,WAAA,CAAAC,YAAA,uBAAAC,YAAA,gBAAVJ,CAAU,gDAMjCK,EAAgBL,IAAOM,KAAIJ,WAAA,CAAAC,YAAA,gBAAAC,YAAA,gBAAXJ,CAAW,oEAO3BO,EAAmBP,IAAOQ,GAAEN,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAATJ,CAAS,4CAK5BS,EAAiBT,IAAOU,MAAKR,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAZJ,CAAY,8DAM7BW,EAAiBX,IAAOY,MAAKV,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAZJ,CAAY,mIAU7Ba,EAAkBb,IAAOc,OAAMZ,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAbJ,CAAa,mIAU/Be,EAAkBf,IAAOgB,OAAMd,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAbJ,CAAa,uIAU/BiB,EAAkBjB,IAAOC,IAAGC,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAVJ,CAAU,mKAOf,SAAAkB,GAAK,OAAIA,EAAMC,OAAO,IAInCC,EAAYpB,IAAOqB,EAACnB,WAAA,CAAAC,YAAA,YAAAC,YAAA,gBAARJ,CAAQ,0DAClB,SAAAkB,GAAK,OAAIA,EAAMI,IAAI,I,OCxD5BC,EAAuB,CAC3B,CACEC,SAAU,IACVC,YAAa,KAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,OAKXC,EAAa,SAAAC,GAAAC,YAAAF,EAAAC,GAAA,IAAAE,EAAAC,YAAAJ,GAAA,SAAAA,IAAA,IAAAK,EAAAC,YAAA,KAAAN,GAAA,QAAAO,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GA4BhB,OA5BgBP,EAAAF,EAAAU,KAAAC,MAAAX,EAAA,OAAAY,OAAAL,KACjBM,MAAQ,CACNC,WAAY,GACZC,QAAS,GACTC,SAAU,GACVC,SAAUvB,EAAqB,GAAGC,SAClCuB,aAAa,GACdhB,EAEDiB,iBAAmB,SAAAC,GACjBlB,EAAKmB,SAAS,CAACL,SAAUI,EAAME,OAAOC,OACxC,EAACrB,EAEDsB,gBAAkB,SAAAJ,GAChBlB,EAAKmB,SAAS,CAACN,QAASK,EAAME,OAAOC,OACvC,EAACrB,EAEDuB,mBAAqB,SAAAL,GACnBlB,EAAKmB,SAAS,CAACP,WAAYM,EAAME,OAAOC,OAC1C,EAACrB,EAEDwB,iBAAmB,SAAAN,GACjBlB,EAAKmB,SAAS,CAACJ,SAAUG,EAAME,OAAOC,OACxC,EAACrB,EAEDyB,aAAe,SAAAP,GACbA,EAAMQ,iBACN1B,EAAKmB,SAAS,CAACH,aAAa,GAC9B,EAAChB,CAAA,CAgDA,OAhDA2B,YAAAhC,EAAA,EAAAiC,IAAA,SAAAP,MAED,WACE,IAAAQ,EAA+DC,KAAKnB,MAA7DI,EAAQc,EAARd,SAAUH,EAAUiB,EAAVjB,WAAYC,EAAOgB,EAAPhB,QAASC,EAAQe,EAARf,SAAUE,EAAWa,EAAXb,YAChD,OACEe,eAAC/D,EAAoB,CAAAgE,SAAA,CACnBD,eAACzD,EAAa,CAAC2D,SAAUH,KAAKL,aAAaO,SAAA,CACzCE,cAAC1D,EAAgB,CAAAwD,SAAC,mBAClBE,cAACxD,EAAc,CAACyD,QAAQ,QAAOH,SAAC,cAChCE,cAACtD,EAAc,CACbwD,GAAG,QACHC,YAAY,kBACZC,SAAUR,KAAKb,iBACfI,MAAOP,IAGToB,cAACxD,EAAc,CAACyD,QAAQ,UAASH,SAAC,aAClCE,cAACtD,EAAc,CACbwD,GAAG,UACHC,YAAY,iBACZC,SAAUR,KAAKR,gBACfD,MAAOR,IAGTqB,cAACxD,EAAc,CAACyD,QAAQ,aAAYH,SAAC,gBACrCE,cAACtD,EAAc,CACbwD,GAAG,aACHC,YAAY,oBACZC,SAAUR,KAAKP,mBACfF,MAAOT,IAGTsB,cAACxD,EAAc,CAACyD,QAAQ,aAAYH,SAAC,cACrCE,cAACpD,EAAe,CAACwD,SAAUR,KAAKN,iBAAkBH,MAAON,EAASiB,SAC/DxC,EAAqB+C,KAAI,SAAAC,GAAI,OAC5BN,cAAA,UAAAF,SAA6BQ,EAAK9C,aAArB8C,EAAK/C,SAAqC,MAG3DyC,cAAClD,EAAe,CAACyD,KAAK,SAAQT,SAAC,gBAEhChB,GACCe,eAAC7C,EAAe,CAACE,QAAS0B,EAAU,cAAY,OAAMkB,SAAA,CACpDE,cAAC7C,EAAS,CAACE,KAAMwB,EAASiB,SAAEnB,IAC5BqB,cAAC7C,EAAS,CAACE,KAAMwB,EAASiB,SAAEpB,SAKtC,KAACjB,CAAA,CA5EgB,CAAS+C,aA+Eb/C,ICtHAgD,G,MAFH,WAAH,OAAST,cAACvC,EAAa,GAAG,GCAnCiD,IAASC,OACPX,cAACY,IAAMC,WAAU,CAAAf,SACfE,cAACS,EAAG,MAENK,SAASC,eAAe,Q","file":"static/js/main.510427a8.chunk.js","sourcesContent":["// Style your components here\nimport styled from 'styled-components'\n\nexport const BgContainerComponent = styled.div`\n  margin: 20px;\n  min-height: 100vh;\n  display: flex;\n`\n\nexport const FormComponent = styled.form`\n  display: flex;\n  flex-direction: column;\n  margin: 20px;\n  min-width: 50vw;\n`\n\nexport const HeadingComponent = styled.h1`\n  font-family: 'Open Sans';\n  color: #35469c;\n`\n\nexport const LabelComponent = styled.label`\n  font-family: 'Open Sans';\n  color: #7e858e;\n  margin-bottom: 5px;\n`\n\nexport const InputComponent = styled.input`\n  margin-bottom: 15px;\n  height: 30px;\n  width: 250px;\n  border: 1px solid #d7dfe9;\n  color: #7e858e;\n  border-radius: 5px;\n  padding: 5px;\n  outline: none;\n`\nexport const OptionComponent = styled.select`\n  margin-bottom: 15px;\n  height: 30px;\n  width: 250px;\n  border: 1px solid #d7dfe9;\n  color: #7e858e;\n  border-radius: 5px;\n  padding: 5px;\n  outline: none;\n`\nexport const ButtonComponent = styled.button`\n  background-color: #0b69ff;\n  color: #ffffff;\n  font-family: 'Open Sans';\n  border: 0;\n  border-radius: 5px;\n  height: 30px;\n  width: 100px;\n  cursor: pointer;\n`\nexport const OutputContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 500px;\n  height: 500px;\n  background-image: url(${props => props.bgImage});\n  background-size: cover;\n`\n\nexport const Paragraph = styled.p`\n  font-size: ${props => props.size}px;\n  color: white;\n  font-family: 'Open Sans';\n`\n","import {Component} from 'react'\nimport {\n  LabelComponent,\n  InputComponent,\n  HeadingComponent,\n  FormComponent,\n  BgContainerComponent,\n  OptionComponent,\n  ButtonComponent,\n  OutputContainer,\n  Paragraph,\n} from './styledComponents'\n\nconst fontSizesOptionsList = [\n  {\n    optionId: '8',\n    displayText: '8',\n  },\n  {\n    optionId: '12',\n    displayText: '12',\n  },\n  {\n    optionId: '16',\n    displayText: '16',\n  },\n  {\n    optionId: '20',\n    displayText: '20',\n  },\n  {\n    optionId: '24',\n    displayText: '24',\n  },\n  {\n    optionId: '28',\n    displayText: '28',\n  },\n  {\n    optionId: '32',\n    displayText: '32',\n  },\n]\n// Write your code here\n\nclass MemeGenerator extends Component {\n  state = {\n    bottomText: '',\n    topText: '',\n    imageUrl: '',\n    fontSize: fontSizesOptionsList[0].optionId,\n    isGenerated: false,\n  }\n\n  onImageUrlChange = event => {\n    this.setState({imageUrl: event.target.value})\n  }\n\n  onTopTextChange = event => {\n    this.setState({topText: event.target.value})\n  }\n\n  onBottomTextChange = event => {\n    this.setState({bottomText: event.target.value})\n  }\n\n  onFontSizeChange = event => {\n    this.setState({fontSize: event.target.value})\n  }\n\n  onSubmitForm = event => {\n    event.preventDefault()\n    this.setState({isGenerated: true})\n  }\n\n  render() {\n    const {fontSize, bottomText, topText, imageUrl, isGenerated} = this.state\n    return (\n      <BgContainerComponent>\n        <FormComponent onSubmit={this.onSubmitForm}>\n          <HeadingComponent>Meme Generator</HeadingComponent>\n          <LabelComponent htmlFor=\"image\">Image Url</LabelComponent>\n          <InputComponent\n            id=\"image\"\n            placeholder=\"Enter Image Url\"\n            onChange={this.onImageUrlChange}\n            value={imageUrl}\n          />\n\n          <LabelComponent htmlFor=\"topText\">Top Text</LabelComponent>\n          <InputComponent\n            id=\"topText\"\n            placeholder=\"Enter Top Text\"\n            onChange={this.onTopTextChange}\n            value={topText}\n          />\n\n          <LabelComponent htmlFor=\"bottomText\">Bottom Text</LabelComponent>\n          <InputComponent\n            id=\"bottomText\"\n            placeholder=\"Enter Bottom Text\"\n            onChange={this.onBottomTextChange}\n            value={bottomText}\n          />\n\n          <LabelComponent htmlFor=\"bottomText\">Font Size</LabelComponent>\n          <OptionComponent onChange={this.onFontSizeChange} value={fontSize}>\n            {fontSizesOptionsList.map(each => (\n              <option key={each.optionId}>{each.displayText}</option>\n            ))}\n          </OptionComponent>\n          <ButtonComponent type=\"submit\">Generate</ButtonComponent>\n        </FormComponent>\n        {isGenerated && (\n          <OutputContainer bgImage={imageUrl} data-testid=\"meme\">\n            <Paragraph size={fontSize}>{topText}</Paragraph>\n            <Paragraph size={fontSize}>{bottomText}</Paragraph>\n          </OutputContainer>\n        )}\n      </BgContainerComponent>\n    )\n  }\n}\n\nexport default MemeGenerator\n","import MemeGenerator from './components/MemeGenerator'\n\nimport './App.css'\n\nconst App = () => <MemeGenerator />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}